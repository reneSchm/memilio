name: "Linux Build"
description: "Build the C++ library on Linux."
inputs:
  config:
    description: "Configuration to build (Release or Debug, see CMAKE_BUILD_TYPE)"
    required: true
    default: "Release"
  compiler:
    description: "Compiler to use (clang or gcc)."
    required: true
    default: "gcc"
  version:
    description: "Version of the compiler to use (min or latest)."
    required: true
    default: "latest"
  optional-dependencies:
    description: "Build the library with optional dependencies (ON or OFF)"
    required: false
    default: "ON"
  coverage:
    description: "Turn coverage on (ON or OFF)"
    required: false
    default: "OFF"
  sanitize-ub:
    description: "Turn on UB sanitzer (ON or OFF)"
    required: false
    default: "OFF"
  sanitize-addr:
    description: "Turn on address sanitzer (ON or OFF)"
    required: false
    default: "OFF"
runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq -y install lcov
        if [[ "${{ inputs.optional-dependencies }}" == "ON" ]]; then
          sudo apt-get -qq -y install libhdf5-dev 
        fi
        if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
          if [[ "${{ inputs.version }}" == "latest" ]]; then   
            sudo apt-get -qq -y install gcc-11
            sudo apt-get -qq -y install g++-11
          fi
        elif [[ "${{ inputs.compiler }}" == "clang" ]]; then
          if [[ "${{ inputs.version }}" == "min" ]]; then
            sudo apt-get -qq -y install clang-6.0
          else
            sudo apt-get -qq -y install clang-14
          fi
        fi
    - name: Build
      shell: bash
      run: |
        cd cpp
        if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
          if [[ "${{ inputs.version }}" == "min" ]]; then
            export CC=/usr/bin/gcc-9
            export CXX=/usr/bin/g++-9
          else        
            export CC=/usr/bin/gcc-10
            export CXX=/usr/bin/g++-10
          fi
        elif [[ "${{ inputs.compiler }}" == "clang" ]]; then
          if [[ "${{ inputs.version }}" == "min" ]]; then
            export CC=/usr/bin/clang-6.0
            export CXX=/usr/bin/clang++-6.0
          else        
            export CC=/usr/bin/clang-14
            export CXX=/usr/bin/clang++-14
          fi
        else
          echo "unknown value for action input: compiler"
          exit 1
        fi
        mkdir -p build && cd build
        cmake -DCMAKE_BUILD_TYPE=${{ inputs.config }} -DMEMILIO_TEST_COVERAGE=${{ inputs.coverage }} -DMEMILIO_SANITIZE_ADDRESS=${{ inputs.sanitize-addr }} -DMEMILIO_SANITIZE_UNDEFINED=${{ inputs.sanitize-ub }} -DMEMILIO_USE_BUNDLED_JSONCPP=${{ inputs.optional-dependencies }} ..
        make -j4
    - name: create build dir archive
      shell: bash
      run: |
        cd cpp
        tar -czf build.tar.gz build
    - name: Upload built directory
      uses: actions/upload-artifact@v3
      with:
        name: build-cpp-linux-${{ inputs.compiler }}-${{ inputs.version }}-${{ inputs.config }}-${{ inputs.optional-dependencies == 'ON' && 'full' || 'part'}}
        path: cpp/build.tar.gz
        retention-days: 1
